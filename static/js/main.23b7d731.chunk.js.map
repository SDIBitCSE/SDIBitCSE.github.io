{"version":3,"sources":["pages/SurveyForm.js","utils/hooks.js","pages/Join.js","pages/Submitted.js","App.js","ApolloProvider.js","index.js"],"names":["REGISTER_USER","gql","SurveyForm","props","useState","errors","setErrors","callback","initialState","value","setValue","onChange","event","target","name","onSubmit","preventDefault","useForm","addUser","phone","college","codechef_id","whatsapp","branch","semester","email","useMutation","update","proxy","userData","data","createSurvey","toLowerCase","history","push","onError","err","undefined","graphQLErrors","extensions","exception","error","variables","loading","Segment","inverted","color","Menu","secondary","size","fluid","widths","Item","style","background","alt","src","Grid","Row","centered","Column","width","Form","noValidate","className","Input","label","placeholder","type","maxLength","minLength","Button","Object","keys","length","values","map","Join","href","rel","Submitted","App","Container","exact","path","component","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23b7d731.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Form, Button, Grid, Segment, Menu } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { useForm } from '../utils/hooks'\r\n\r\nconst SurveyForm = (props) =>{\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const {onChange, onSubmit, value} = useForm(submitSurvey, {\r\n        name: '',\r\n        phone: '',\r\n        college: '',\r\n        codechef_id: '',\r\n        whatsapp: '',\r\n        branch: '',\r\n        semester: '',\r\n        email: ''\r\n    })\r\n\r\n    const [addUser, {loading}] = useMutation(REGISTER_USER, {\r\n        update(proxy, {data: {createSurvey: userData}}){\r\n            if(userData.college.toLowerCase() === 'bangalore institute of technology' && (userData.branch.toLowerCase() === 'computer science and enginerring' || userData.branch.toLowerCase() === 'cse' || userData.branch.toLowerCase() === 'computer science')){\r\n                props.history.push('/join')\r\n\r\n            }else{\r\n                // console.log(userData.college.toLowerCase())\r\n                props.history.push('/submitted')\r\n            }\r\n        },\r\n        onError(err){\r\n            if (err.graphQLErrors[0] !== undefined)\r\n                setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n            else{\r\n                setErrors({\r\n                    error: \"Bad Network\"\r\n                })\r\n            }\r\n            // console.log(err.graphQLErrors)\r\n        },\r\n        variables: value\r\n    })\r\n\r\n    function submitSurvey(){\r\n        addUser()\r\n    }\r\n\r\n    return(\r\n        <Segment inverted color=\"teal\">\r\n            <Menu secondary size=\"massive\" fluid widths={3}>\r\n                <Menu.Item>\r\n                    <img style={{background: 'white'}} alt=\"img_3\" src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/fb-image-icon.png?alt=media\" />\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                <img alt=\"img\" src='https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/Untitled%20design.png?alt=media' />\r\n                    <div>SDI CLUB</div>\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <img style={{background: 'teal'}} alt=\"img_2\" src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/bitlogo.png?alt=media\" />\r\n                </Menu.Item>\r\n            </Menu>\r\n            <Menu secondary size=\"massive\" fluid widths={4}>\r\n                <Menu.Item>\r\n                    \r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    Competitive Coding Competition\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    \r\n                </Menu.Item>\r\n            </Menu>\r\n            <Grid>\r\n                <Grid.Row centered >\r\n                    <Grid.Column width={10}>\r\n                        \r\n                    <Form size=\"massive\" onSubmit={onSubmit} noValidate className={loading ? \"loading\": \"\"}>\r\n                        <Form.Input\r\n                            label=\"Name\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            value={value.name}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            type=\"text\"\r\n                            value={value.email}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Phone\"\r\n                            placeholder=\"Phone\"\r\n                            name=\"phone\"\r\n                            type=\"text\"\r\n                            value={value.phone}\r\n                            onChange={onChange}\r\n                            maxLength=\"10\"\r\n                            minLength=\"10\"\r\n                        />\r\n                        <Form.Input\r\n                            label=\"College\"\r\n                            placeholder=\"College\"\r\n                            name=\"college\"\r\n                            type=\"text\"\r\n                            value={value.college}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Codechef Id\"\r\n                            placeholder=\"Codechef Id\"\r\n                            name=\"codechef_id\"\r\n                            type=\"text\"\r\n                            value={value.codechef_id}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Whatsapp (If different than phone)\"\r\n                            placeholder=\"Whatsapp\"\r\n                            name=\"whatsapp\"\r\n                            type=\"text\"\r\n                            value={value.whatsapp}\r\n                            onChange={onChange}\r\n                            maxLength=\"10\"\r\n                            minLength=\"10\"\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Branch\"\r\n                            placeholder=\"Branch\"\r\n                            name=\"branch\"\r\n                            type=\"text\"\r\n                            value={value.branch}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Semester\"\r\n                            placeholder=\"Semester\"\r\n                            name=\"semester\"\r\n                            type=\"text\"\r\n                            value={value.semester}\r\n                            onChange={onChange}\r\n                            maxLength=\"1\"\r\n                            minLength=\"1\"\r\n                        />\r\n                        <Button type='submit' color=\"blue\">Submit</Button>\r\n                    </Form>\r\n                    {Object.keys(errors).length > 0 && (\r\n                        <div className=\"ui error message\">\r\n                            <ul className=\"list\">\r\n                                {Object.values(errors).map(value =>(\r\n                                    <li key={value}>{value}</li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    )}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n    mutation createSurvey(\r\n        $name: String!\r\n        $phone: String!\r\n        $college: String!\r\n        $codechef_id: String!\r\n        $whatsapp: String\r\n        $branch: String!\r\n        $semester: String!\r\n        $email: String!\r\n    ){\r\n        createSurvey(\r\n            surveyInput:{\r\n                name: $name\r\n                phone: $phone\r\n                college: $college\r\n                codechef_id: $codechef_id\r\n                whatsapp: $whatsapp\r\n                branch: $branch\r\n                semester: $semester\r\n                email: $email\r\n            }\r\n        ){\r\n            id\r\n            college\r\n            branch\r\n        }\r\n    }\r\n`\r\n\r\nexport default SurveyForm;","import { useState } from 'react'\r\n\r\nexport const useForm = (callback, initialState = {}) =>{\r\n    const [value, setValue] = useState(initialState)\r\n\r\n    const onChange = (event) =>{\r\n        setValue({...value, [event.target.name]: event.target.value})\r\n    }\r\n\r\n    const onSubmit = event =>{\r\n        event.preventDefault()\r\n        callback()\r\n    }\r\n\r\n    return {\r\n        onChange,\r\n        onSubmit,\r\n        value\r\n    }\r\n}","import React from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\n\r\nconst Join =() =>{\r\n    return(\r\n        <Segment color=\"teal\">\r\n            <h2>\r\n                To JOIN SDI: <br />\r\n                <b>\r\n                <a href=\"https://chat.whatsapp.com/JA8WBVjjHi45dDFw1sDNh6\" target=\"_blank\" rel=\"noopener noreferrer\">Click Here</a></b>\r\n            </h2>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default Join;","import React from 'react'\r\nimport { Segment } from 'semantic-ui-react'\r\n\r\nfunction Submitted(){\r\n    return(\r\n        <Segment size=\"massive\">\r\n            <h2>\r\n                Please Pay Rs 20 to UPI<br />\r\n                9001959788 (Sachin Kumar)\r\n            </h2>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default Submitted","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nimport SurveyForm from './pages/SurveyForm'\r\nimport Join from './pages/Join'\r\nimport Submitted from './pages/Submitted'\r\nimport './App.css'\r\n\r\nfunction App(){\r\n    return(\r\n        <Router>\r\n            <Container>\r\n                <Route exact path = '/' component={SurveyForm} />\r\n                <Route exact path='/join' component={Join} />\r\n                <Route exact path='/submitted' component={Submitted} />\r\n            </Container>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport App from './App'\r\nimport ApolloClient from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: \"https://sdi-react-app.herokuapp.com\"  // Here Server Address \"http://localhost:5000/\"//\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: httpLink,\r\n    cache: new InMemoryCache()\r\n})\r\n\r\nexport default (\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n)","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}