{"version":3,"sources":["utils/hooks.js","pages/SurveyForm.js","pages/Submitted.js","pages/Join.js","context/auth.js","pages/Admin.js","components/UserData.js","App.js","ApolloProvider.js","index.js"],"names":["useForm","callback","initialState","useState","value","setValue","onChange","event","target","name","onSubmit","preventDefault","REGISTER_USER","gql","SurveyForm","props","errors","setErrors","addUser","phone","college","whatsapp","branch","usn","semester","email","useMutation","update","proxy","userData","data","createSurvey","toLowerCase","history","push","onError","err","undefined","graphQLErrors","console","log","extensions","exception","error","variables","loading","Segment","inverted","color","id","alt","src","Menu","secondary","size","fluid","widths","Item","Grid","Row","centered","Column","width","Form","noValidate","className","Input","label","placeholder","type","maxLength","minLength","Button","Object","keys","length","values","map","Submitted","Join","href","rel","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","logout","LOGIN_USER","Admin","context","useContext","loginUser","username","password","primary","FETCH_USER_DATA","UserData","useQuery","Transition","Group","getSurvey","survey","style","marginBottom","marginRight","marginTop","Card","Content","Header","Description","codechef_id","App","Container","exact","path","component","httpLink","createHttpLink","uri","authLink","setContext","token","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2450778d.chunk.js","sourcesContent":["import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) =>{\n    const [value, setValue] = useState(initialState)\n\n    const onChange = (event) =>{\n        setValue({...value, [event.target.name]: event.target.value})\n    }\n\n    const onSubmit = event =>{\n        event.preventDefault()\n        callback()\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        value\n    }\n}","import React, { useState } from \"react\";\nimport { Form, Button, Grid, Segment, Menu } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { useForm } from \"../utils/hooks\";\nimport \"../App.css\";\n\nconst SurveyForm = (props) => {\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, value } = useForm(submitSurvey, {\n    name: \"\",\n    phone: \"\",\n    college: \"\",\n    whatsapp: \"\",\n    branch: \"\",\n    usn: \"\",\n    semester: \"\",\n    email: \"\",\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(proxy, { data: { createSurvey: userData } }) {\n      if (\n        userData.college.toLowerCase() ===\n          \"bangalore institute of technology\" &&\n        (userData.branch.toLowerCase() === \"computer science and enginerring\" ||\n          userData.branch.toLowerCase() === \"cse\" ||\n          userData.branch.toLowerCase() === \"computer science\")\n      ) {\n        props.history.push(\"/join\");\n      } else {\n        // console.log(userData.college.toLowerCase())\n        props.history.push(\"/submitted\");\n      }\n    },\n    onError(err) {\n      if (err.graphQLErrors[0] !== undefined) {\n        console.log(err.graphQLErrors[0]);\n        setErrors(err.graphQLErrors[0].extensions.exception.errors);\n      } else {\n        setErrors({\n          error: \"Server Error Try Again\",\n        });\n      }\n      // console.log(err.graphQLErrors)\n    },\n    variables: value,\n  });\n\n  function submitSurvey() {\n    addUser();\n  }\n\n  return (\n    <Segment inverted color=\"teal\">\n      <div>\n        {/* <div id=\"rota_logo\">\n          <img\n            style={{\n              background: \"white\",\n            }}\n            alt=\"img_3\"\n            src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/title_logo.png?alt=media\"\n          />\n        </div>{\" \"} */}\n        <div id=\"sdi_logo\">\n          <img\n            alt=\"img\"\n            src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/Untitled%20design.png?alt=media\"\n          />\n        </div>{\" \"}\n        <div id=\"bit_logo\">\n          <img\n            alt=\"\"\n            src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/bitlogo.png?alt=media\"\n          />\n        </div>{\" \"}\n      </div>{\" \"}\n      <Menu secondary size=\"massive\" fluid widths={4}>\n        <Menu.Item> </Menu.Item>{\" \"}\n        <Menu.Item> Discord Event Registration </Menu.Item>{\" \"}\n        <Menu.Item> </Menu.Item>{\" \"}\n      </Menu>{\" \"}\n      <Grid>\n        <Grid.Row centered>\n          <Grid.Column width={10}>\n            <Form\n              size=\"massive\"\n              onSubmit={onSubmit}\n              noValidate\n              className={loading ? \"loading\" : \"\"}\n            >\n              <Form.Input\n                label=\"Name\"\n                placeholder=\"Name\"\n                name=\"name\"\n                type=\"text\"\n                value={value.name}\n                onChange={onChange}\n              />{\" \"}\n              <Form.Input\n                label=\"Email\"\n                placeholder=\"Email\"\n                name=\"email\"\n                type=\"text\"\n                value={value.email}\n                onChange={onChange}\n              />{\" \"}\n              <Form.Input\n                label=\"Phone\"\n                placeholder=\"Phone\"\n                name=\"phone\"\n                type=\"text\"\n                value={value.phone}\n                onChange={onChange}\n                maxLength=\"10\"\n                minLength=\"10\"\n              />\n              <Form.Input\n                label=\"College\"\n                placeholder=\"College\"\n                name=\"college\"\n                type=\"text\"\n                value={value.college}\n                onChange={onChange}\n              />{\" \"}\n              <Form.Input\n                label=\"Usn\"\n                placeholder=\"Usn\"\n                name=\"usn\"\n                type=\"text\"\n                value={value.usn}\n                onChange={onChange}\n              />{\" \"}\n              <Form.Input\n                label=\"Whatsapp (If different than phone)\"\n                placeholder=\"Whatsapp\"\n                name=\"whatsapp\"\n                type=\"text\"\n                value={value.whatsapp}\n                onChange={onChange}\n                maxLength=\"10\"\n                minLength=\"10\"\n              />\n              <Form.Input\n                label=\"Branch\"\n                placeholder=\"Branch\"\n                name=\"branch\"\n                type=\"text\"\n                value={value.branch}\n                onChange={onChange}\n              />{\" \"}\n              <Form.Input\n                label=\"Semester\"\n                placeholder=\"Semester\"\n                name=\"semester\"\n                type=\"text\"\n                value={value.semester}\n                onChange={onChange}\n                maxLength=\"1\"\n                minLength=\"1\"\n              />\n              <Button type=\"submit\" color=\"blue\">\n                {\" \"}\n                Submit{\" \"}\n              </Button>{\" \"}\n            </Form>{\" \"}\n            {Object.keys(errors).length > 0 && (\n              <div className=\"ui error message\">\n                <ul className=\"list\">\n                  {\" \"}\n                  {Object.values(errors).map((value) => (\n                    <li key={value}> {value} </li>\n                  ))}{\" \"}\n                </ul>{\" \"}\n              </div>\n            )}{\" \"}\n          </Grid.Column>{\" \"}\n        </Grid.Row>{\" \"}\n      </Grid>{\" \"}\n    </Segment>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation createSurvey(\n    $name: String!\n    $phone: String!\n    $college: String!\n    $usn: String!\n    $whatsapp: String\n    $branch: String!\n    $semester: String!\n    $email: String!\n  ) {\n    createSurvey(\n      surveyInput: {\n        name: $name\n        phone: $phone\n        college: $college\n        usn: $usn\n        whatsapp: $whatsapp\n        branch: $branch\n        semester: $semester\n        email: $email\n      }\n    ) {\n      id\n      college\n      branch\n    }\n  }\n`;\n\nexport default SurveyForm;\n","import React from 'react'\nimport { Segment } from 'semantic-ui-react'\n\nfunction Submitted(){\n    return(\n        <Segment size=\"massive\" color=\"teal\">\n            <h2>\n                Registered Successfully.Please Pay Rs.30 to 9424992832@ybl and share screenshot on whatsapp with +918319717414<br />\n                Thank You.\n            </h2>\n        </Segment>\n    )\n}\n\nexport default Submitted","import React from 'react'\nimport { Segment } from 'semantic-ui-react';\n\nimport Submitted from './Submitted'\n\nconst Join =() =>{\n    return(\n        <>\n        <Submitted />\n        <Segment color=\"teal\">\n            <h2>\n                To JOIN SDI Club: <br />\n                <b>\n                <a href=\"https://chat.whatsapp.com/JA8WBVjjHi45dDFw1sDNh6\" target=\"_blank\" rel=\"noopener noreferrer\">Click Here</a></b>\n            </h2>\n        </Segment>\n        </>\n    )\n}\n\nexport default Join;","import React, {useReducer, createContext} from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    user: null\n}\n\nif(localStorage.getItem('jwtToken')){\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\n\n    if(decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken')\n    } else {\n        initialState.user = decodedToken\n    }\n}\n\nconst AuthContext = createContext({\n    user:null,\n    login: (data) => {},\n    logout: () => {}\n})\n\nfunction authReducer(state, action){\n    switch(action.type){\n        case 'LOGIN':\n            return{\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT':\n            return {\n                ...state,\n                user: null\n            }\n        default:\n            return state;\n    }\n}\n\nfunction AuthProvider(props){\n    const [state, dispatch] = useReducer(authReducer, initialState)\n\n    function login(userData){\n        localStorage.setItem('jwtToken', userData.token)\n        dispatch({\n            type: 'LOGIN',\n            payload: userData\n        })\n    }\n\n    function logout(){\n        localStorage.removeItem('jwtToken')\n        dispatch({\n            type: 'LOGOUT'\n        })\n    }\n\n    return  (\n        <AuthContext.Provider\n            value={{ user: state.user, login, logout }}\n            {...props}\n        />\n    )\n}\n\nexport { AuthContext, AuthProvider}","import React, { useContext, useState } from 'react'\nimport {Button, Form} from 'semantic-ui-react'\nimport {useMutation} from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nimport {useForm} from '../utils/hooks'\n\nimport { AuthContext } from '../context/auth'\n\nconst Admin = (props)=>{\n    const context = useContext(AuthContext)\n\n    const [errors, setErrors] = useState({})\n\n    const {onChange, onSubmit, value} = useForm(loginUserCallback,{\n        username: '',\n        password: ''\n    })\n\n    const [loginUser, {loading}] = useMutation(LOGIN_USER, {\n        update(proxy, {data: { login: userData }}){\n            // console.log(userData)\n            context.login(userData)\n            props.history.push('/userdata')\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        variables: value\n    })\n\n    function loginUserCallback(){\n        loginUser()\n    }\n\n    return(\n        <div className=\"form-container\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\": ''}>\n                <h1>Login</h1>\n                <Form.Input\n                    label=\"Username\"\n                    placeholder=\"Username\"\n                    name=\"username\"\n                    type=\"text\"\n                    value={value.username}\n                    onChange={onChange}\n                />\n                <Form.Input \n                    label=\"Password\"\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    type=\"password\"\n                    value={value.password}\n                    onChange={onChange}\n                />\n                <Button type=\"submit\" primary>\n                    Login\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className=\"ui error message\">\n                    <ul className=\"list\">\n                        {Object.values(errors).map(value =>(\n                            <li key={value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n\n\nconst LOGIN_USER = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ){\n        login(\n                username: $username\n                password: $password\n        ){\n            id email username createdAt token\n        }\n    }\n`\n\nexport default Admin;","import React from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/client'\nimport { Card, Grid, Transition } from 'semantic-ui-react'\n\nfunction UserData(){\n    const { loading, data } = useQuery(FETCH_USER_DATA)\n    return(\n        <Grid>\n            <Grid.Row>\n                {\n                    loading ? (\n                        <h1>Loading Data</h1>\n                    ) : (\n                        <Transition.Group>\n                            {\n                                data.getSurvey.length > 0 && data.getSurvey.map(survey => (\n                                    <Grid.Row width={14} key={survey.id} style={{marginBottom: 20, marginRight: 20, marginTop: 10}}>\n                                        <Card>\n                                        <Card.Content>\n                                            <Card.Header>{survey.name}</Card.Header>\n                                            <Card.Description>\n                                                Phone: {survey.phone} <br />\n                                                College: {survey.college} <br />\n                                                Codechef_id: {survey.codechef_id} <br />\n                                                Whatsapp: {survey.whatsapp} <br />\n                                                Branch: {survey.branch} <br />\n                                                Semester: {survey.semester} <br />\n                                                Email: {survey.email} <br />\n                                            </Card.Description>\n                                        </Card.Content>\n                                        </Card>\n                                    </Grid.Row>\n                                ))\n                            }\n                        </Transition.Group>\n                    )\n                }\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nconst FETCH_USER_DATA = gql`\nquery getSurvey{\n        getSurvey{\n            id\n            name\n            phone\n            college\n            codechef_id\n            whatsapp\n            branch\n            semester\n            email\n        }\n    }\n`\n\nexport default UserData","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nimport SurveyForm from './pages/SurveyForm'\nimport Join from './pages/Join'\nimport Submitted from './pages/Submitted'\nimport Admin from './pages/Admin'\nimport './App.css'\nimport UserData from './components/UserData'\n\nfunction App(){\n    return(\n        <Router>\n            <Container>\n                <Route exact path='/admin' component={Admin} />\n                <Route exact path = '/' component={SurveyForm} />\n                <Route exact path='/join' component={Join} />\n                <Route exact path='/submitted' component={Submitted} />\n                <Route exact path='/userdata' component={UserData} />\n            </Container>\n        </Router>\n    )\n}\n\nexport default App","import React from 'react'\nimport App from './App'\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createHttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { setContext } from 'apollo-link-context'\n\nconst httpLink = createHttpLink({\n    uri: \"https://sdi-survey.herokuapp.com\" // \"https://sdi-react-app.herokuapp.com\"  // Here Server Address \"http://localhost:5000/\"//\n})\n\nconst authLink = setContext(() =>{\n    const token = localStorage.getItem('jwttoken')\n\n    return{\n        headers:{\n            Authorization: token ? `Bearer ${token}` : ''\n        }\n    }\n})\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n})\n\nexport default (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}