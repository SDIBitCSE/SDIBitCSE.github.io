{"version":3,"sources":["pages/SurveyForm.js","utils/hooks.js","pages/Join.js","pages/Submitted.js","App.js","ApolloProvider.js","index.js"],"names":["REGISTER_USER","gql","SurveyForm","props","useState","errors","setErrors","callback","initialState","value","setValue","onChange","event","target","name","onSubmit","preventDefault","useForm","addUser","phone","college","codechef_id","whatsapp","branch","semester","useMutation","update","proxy","userData","data","createSurvey","toLowerCase","history","push","onError","err","graphQLErrors","extensions","exception","variables","loading","Segment","inverted","color","Grid","Row","centered","Column","width","Form","size","noValidate","className","Input","label","placeholder","type","Button","Object","keys","length","values","map","Join","Submitted","App","Container","exact","path","component","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.782ca74c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Button, Grid, Segment } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { useForm } from '../utils/hooks'\n\nconst SurveyForm = (props) =>{\n    const [errors, setErrors] = useState({})\n\n    const {onChange, onSubmit, value} = useForm(submitSurvey, {\n        name: '',\n        phone: '',\n        college: '',\n        codechef_id: '',\n        whatsapp: '',\n        branch: '',\n        semester: ''\n    })\n\n    const [addUser, {loading}] = useMutation(REGISTER_USER, {\n        update(proxy, {data: {createSurvey: userData}}){\n            if(userData.college.toLowerCase() === 'bangalore institute of technology' && (userData.branch.toLowerCase() === 'computer science and enginerring' || userData.branch.toLowerCase() === 'cse' || userData.branch.toLowerCase() === 'computer science')){\n                props.history.push('/join')\n\n            }else{\n                // console.log(userData.college.toLowerCase())\n                props.history.push('/submitted')\n            }\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        variables: value\n    })\n\n    function submitSurvey(){\n        addUser()\n    }\n\n    return(\n        <Segment inverted color=\"teal\">\n            <h1>Survey</h1>\n            <Grid>\n                <Grid.Row centered >\n                    <Grid.Column width={10}>\n                        \n                    <Form size=\"massive\" onSubmit={onSubmit} noValidate className={loading ? \"loading\": \"\"}>\n                        <Form.Input\n                            label=\"Name\"\n                            placeholder=\"Name\"\n                            name=\"name\"\n                            type=\"text\"\n                            value={value.name}\n                            onChange={onChange}\n                        />\n                        <Form.Input\n                            label=\"Phone\"\n                            placeholder=\"Phone\"\n                            name=\"phone\"\n                            type=\"text\"\n                            value={value.phone}\n                            onChange={onChange}\n                        />\n                        <Form.Input\n                            label=\"College\"\n                            placeholder=\"College\"\n                            name=\"college\"\n                            type=\"text\"\n                            value={value.college}\n                            onChange={onChange}\n                        />\n                        <Form.Input\n                            label=\"Codechef Id\"\n                            placeholder=\"Codechef Id\"\n                            name=\"codechef_id\"\n                            type=\"text\"\n                            value={value.codechef_id}\n                            onChange={onChange}\n                        />\n                        <Form.Input\n                            label=\"Whatsapp (If different than phone)\"\n                            placeholder=\"Whatsapp\"\n                            name=\"whatsapp\"\n                            type=\"text\"\n                            value={value.whatsapp}\n                            onChange={onChange}\n                        />\n                        <Form.Input\n                            label=\"Branch\"\n                            placeholder=\"Branch\"\n                            name=\"branch\"\n                            type=\"text\"\n                            value={value.branch}\n                            onChange={onChange}\n                        />\n                        <Form.Input\n                            label=\"Semester\"\n                            placeholder=\"Semester\"\n                            name=\"semester\"\n                            type=\"text\"\n                            value={value.semester}\n                            onChange={onChange}\n                        />\n                        <Button type='submit' color=\"blue\">Submit</Button>\n                    </Form>\n                    {Object.keys(errors).length > 0 && (\n                        <div className=\"ui error message\">\n                            <ul className=\"list\">\n                                {Object.values(errors).map(value =>(\n                                    <li key={value}>{value}</li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    )\n}\n\nconst REGISTER_USER = gql`\n    mutation createSurvey(\n        $name: String!\n        $phone: String!\n        $college: String!\n        $codechef_id: String!\n        $whatsapp: String\n        $branch: String!\n        $semester: String!\n    ){\n        createSurvey(\n            surveyInput:{\n                name: $name\n                phone: $phone\n                college: $college\n                codechef_id: $codechef_id\n                whatsapp: $whatsapp\n                branch: $branch\n                semester: $semester\n            }\n        ){\n            id\n            college\n            branch\n        }\n    }\n`\n\nexport default SurveyForm;","import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) =>{\n    const [value, setValue] = useState(initialState)\n\n    const onChange = (event) =>{\n        setValue({...value, [event.target.name]: event.target.value})\n    }\n\n    const onSubmit = event =>{\n        event.preventDefault()\n        callback()\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        value\n    }\n}","import React from 'react'\nimport { Segment } from 'semantic-ui-react';\n\nconst Join =() =>{\n    return(\n        <Segment color=\"teal\">\n            <div>\n                TO JOIN SDI:\n                Click here:\n            </div>\n        </Segment>\n    )\n}\n\nexport default Join;","import React from 'react'\nimport { Segment } from 'semantic-ui-react'\n\nfunction Submitted(){\n    return(\n        <Segment size=\"massive\">\n            <div>\n                Thank You\n            </div>\n        </Segment>\n    )\n}\n\nexport default Submitted","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nimport SurveyForm from './pages/SurveyForm'\nimport Join from './pages/Join'\nimport Submitted from './pages/Submitted'\nimport './App.css'\n\nfunction App(){\n    return(\n        <Router>\n            <Container>\n                <Route exact path = '/' component={SurveyForm} />\n                <Route exact path='/join' component={Join} />\n                <Route exact path='/submitted' component={Submitted} />\n            </Container>\n        </Router>\n    )\n}\n\nexport default App","import React from 'react'\nimport App from './App'\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createHttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nconst httpLink = createHttpLink({\n    uri: \"https://sdi-react-app.herokuapp.com\" //\"http://localhost:5000/\" // Here Server Address\n})\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache()\n})\n\nexport default (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}